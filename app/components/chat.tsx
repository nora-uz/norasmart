"use client";

import React, { useState, useEffect, useRef } from "react";

// –ü—É—Ç—å –∫ —Ñ–æ—Ç–æ —Ä–µ–±—ë–Ω–∫–∞ (–∑–∞–º–µ–Ω–∏ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
const BABY_IMG = "/1000004249-removebg-preview-1.jpg";

// –û–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞
const BABY_DESCRIPTIONS = [
  "–°–µ–π—á–∞—Å –º–∞–ª—ã—à –ø–æ—Ö–æ–∂ –Ω–∞ –º–∞–ª–µ–Ω—å–∫–æ–µ –∑–µ—Ä–Ω—ã—à–∫–æ, –Ω–æ —Å –∫–∞–∂–¥—ã–º –¥–Ω—ë–º –±—ã—Å—Ç—Ä–æ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è.",
  "–ú–∞–ª—ã—à –∞–∫—Ç–∏–≤–Ω–æ —Ä–∞—Å—Ç—ë—Ç, —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è –æ—Å–Ω–æ–≤–Ω—ã–µ –æ—Ä–≥–∞–Ω—ã.",
  "–í—ã –∑–∞–º–µ—Ç–∏—Ç–µ –ø–µ—Ä–≤—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è, —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è –Ω–µ—Ä–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞.",
  "–§–æ—Ä–º–∏—Ä—É—é—Ç—Å—è —á–µ—Ä—Ç—ã –ª–∏—Ü–∞, –º–∞–ª—ã—à –º–æ–∂–µ—Ç —à–µ–≤–µ–ª–∏—Ç—å—Å—è.",
  "–ù–∞—á–∏–Ω–∞–µ—Ç —Å–ª—ã—à–∞—Ç—å –∑–≤—É–∫–∏, –∫–æ–∂–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø–ª–æ—Ç–Ω–µ–µ.",
  "–ú–∞–ª—ã—à —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Å–≤–µ—Ç –∏ –∑–≤—É–∫, —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è –º–æ–∑–≥.",
  "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –≤–µ—Å –∏ —Ä–æ—Å—Ç, –æ–±—Ä–∞–∑—É—é—Ç—Å—è —Ä–µ—Ñ–ª–µ–∫—Å—ã.",
  "–í—Å–µ –æ—Ä–≥–∞–Ω—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã, –º–∞–ª—ã—à –∞–∫—Ç–∏–≤–Ω–æ –¥–≤–∏–≥–∞–µ—Ç—Å—è.",
  "–ì–æ—Ç–æ–≤–∏—Ç—Å—è –∫ —Ä–æ–∂–¥–µ–Ω–∏—é, –∑–∞–Ω–∏–º–∞–µ—Ç –∫–æ–Ω–µ—á–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ."
];

const THEMES = [
  { title: "–ó–¥–æ—Ä–æ–≤—å–µ", icon: "‚ù§Ô∏è", desc: "–û –∑–¥–æ—Ä–æ–≤—å–µ –º–∞–º—ã –∏ –º–∞–ª—ã—à–∞" },
  { title: "–ü–∏—Ç–∞–Ω–∏–µ", icon: "ü•ó", desc: "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é" },
  { title: "–î–µ–ø—Ä–µ—Å—Å–∏—è", icon: "üôÇ", desc: "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ" },
  { title: "–£—Å—Ç–∞–ª–æ—Å—Ç—å", icon: "üòû", desc: "–ü—Ä–æ–±–ª–µ–º—ã —Å —É—Å—Ç–∞–ª–æ—Å—Ç—å—é" }
];

const weights = [46, 47, 48];
const heights = [154, 155, 156];

const NoraOnboarding: React.FC = () => {
  const [step, setStep] = useState(0);

  // –ê–Ω–∫–µ—Ç–∞
  const [month, setMonth] = useState<number>(5);
  const [weight, setWeight] = useState<number>(47);
  const [height, setHeight] = useState<number>(155);

  // –î–ª—è —á–∞—Ç–∞
  const [userMsg, setUserMsg] = useState("");
  const [selectedTheme, setSelectedTheme] = useState<string | null>(null);

  // ----- –ü–µ—Ä–≤—ã–π —ç–∫—Ä–∞–Ω -----
  if (step === 0) {
    return (
      <div style={pageStyle}>
        <img src={BABY_IMG} alt="–†–µ–±—ë–Ω–æ–∫" style={imgStyle} />
        <h2 style={{ fontWeight: 700, textAlign: "center", marginTop: 40 }}>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Nora AI</h2>
        <p style={{ textAlign: "center", fontSize: 20, margin: "20px 0" }}>
          –Ø –ø–æ–º–æ–≥–∞—é –±—É–¥—É—â–∏–º –º–∞–º–∞–º –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏: –æ—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–æ–º–∏–Ω–∞—é –æ –≤–∞–∂–Ω—ã—Ö –¥–µ–ª–∞—Ö,
          —Å–ª–µ–∂—É –∑–∞ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ–º –∏ –¥–∞—é –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ –º–µ–¥–∏—Ü–∏–Ω–µ –∏ –∑–∞–±–æ—Ç–µ.
        </p>
        <button style={btnStyle} onClick={() => setStep(1)}>–ù–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è</button>
      </div>
    );
  }

  // ----- –í—Ç–æ—Ä–æ–π —ç–∫—Ä–∞–Ω -----
  if (step === 1) {
    return (
      <div style={pageStyle}>
        <img src={BABY_IMG} alt="–†–µ–±—ë–Ω–æ–∫" style={imgStyle} />
        <h2 style={{ fontWeight: 700, textAlign: "center", marginTop: 40 }}>–ó–∞–ø–æ–ª–Ω–∏—Ç–µ, –¥–ª—è —Ç–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.</h2>
        <div style={{ display: "flex", gap: 12, margin: "20px 0", justifyContent: "center" }}>
          {/* –ú–µ—Å—è—Ü—ã */}
          <div style={cardStyle}>
            <div>–°—Ä–æ–∫ –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏:</div>
            <div style={{ display: "flex", gap: 6, marginTop: 12 }}>
              {[4, 5, 6].map(m => (
                <div
                  key={m}
                  style={{
                    ...selectStyle,
                    background: month === m ? "#F2A5A5" : "#fff",
                    color: month === m ? "#fff" : "#222"
                  }}
                  onClick={() => setMonth(m)}
                >
                  {m}
                </div>
              ))}
            </div>
          </div>
          {/* –í–µ—Å */}
          <div style={cardStyle}>
            <div>–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–µ—Å:</div>
            <div style={{ display: "flex", gap: 6, marginTop: 12 }}>
              {weights.map(w => (
                <div
                  key={w}
                  style={{
                    ...selectStyle,
                    background: weight === w ? "#F2F4F7" : "#fff",
                    color: "#222"
                  }}
                  onClick={() => setWeight(w)}
                >
                  {w}
                </div>
              ))}
            </div>
          </div>
          {/* –†–æ—Å—Ç */}
          <div style={cardStyle}>
            <div>–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç:</div>
            <div style={{ display: "flex", gap: 6, marginTop: 12 }}>
              {heights.map(h => (
                <div
                  key={h}
                  style={{
                    ...selectStyle,
                    background: height === h ? "#F2F4F7" : "#fff",
                    color: "#222"
                  }}
                  onClick={() => setHeight(h)}
                >
                  {h}
                </div>
              ))}
            </div>
          </div>
        </div>
        <button style={btnStyle} onClick={() => setStep(2)}>–î–∞–ª–µ–µ</button>
        <button
          style={{ ...btnStyle, background: "#ECECEC", color: "#333", marginTop: 8 }}
          onClick={() => setStep(0)}
        >
          –ù–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        </button>
      </div>
    );
  }

  // ----- –¢—Ä–µ—Ç–∏–π —ç–∫—Ä–∞–Ω -----
  if (step === 2) {
    return (
      <div style={pageStyle}>
        <div style={{ position: "relative", textAlign: "center", marginBottom: 16 }}>
          <img src={BABY_IMG} alt="–†–µ–±—ë–Ω–æ–∫" style={imgStyle} />
          <div style={{
            position: "absolute", left: "50%", top: "22%", transform: "translate(-50%, 0)",
            background: "#F2A5A5", padding: "18px 28px",
            borderRadius: 25, fontSize: 20, color: "#fff", fontWeight: 500, width: 320,
            maxWidth: "calc(100vw - 40px)", boxSizing: "border-box"
          }}>
            {BABY_DESCRIPTIONS[month-1]}
          </div>
          <div style={{
            position: "absolute", right: "10%", top: "58%",
            background: "#F2A5A5", color: "#fff", padding: "10px 20px",
            borderRadius: 20, fontSize: 22, fontWeight: 700
          }}>
            –í–∞—à —Å—Ä–æ–∫ <br /> –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏ <span style={{ fontSize: 32 }}>{month}</span>
          </div>
        </div>
        <h2 style={{ textAlign: "center", fontWeight: 700, marginBottom: 30 }}>
          –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±—Å—É–¥–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è?
        </h2>
        {/* –¢–µ–º—ã –æ–±—Å—É–∂–¥–µ–Ω–∏—è */}
        <div style={{
          display: "flex", flexWrap: "wrap", gap: 18, justifyContent: "center",
          maxWidth: 700, margin: "0 auto 24px"
        }}>
          {THEMES.map((t, idx) => (
            <div
              key={t.title}
              style={{
                background: "#F7F8FA", borderRadius: 19,
                boxShadow: selectedTheme === t.title ? "0 0 0 2px #F2A5A5 inset" : "none",
                padding: "22px 28px", width: 240, cursor: "pointer"
              }}
              onClick={() => setSelectedTheme(t.title)}
            >
              <div style={{ fontWeight: 700, fontSize: 21, marginBottom: 7 }}>
                {t.title} <span style={{ marginLeft: 12, fontSize: 22 }}>{t.icon}</span>
              </div>
              <div style={{ color: "#444" }}>{BABY_DESCRIPTIONS[month-1]}</div>
            </div>
          ))}
        </div>
        {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ –≤–æ–ø—Ä–æ—Å–∞ */}
        <div style={{
          display: "flex", alignItems: "center", maxWidth: 600, margin: "0 auto",
          gap: 12, borderRadius: 22, background: "#F7F8FA", padding: "10px 28px"
        }}>
          <input
            style={{
              flex: 1, border: "none", fontSize: 26,
              background: "transparent", color: "#222"
            }}
            placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å..."
            value={userMsg}
            onChange={e => setUserMsg(e.target.value)}
          />
          <button
            style={{
              border: "none", background: "none", color: "#F2A5A5",
              fontSize: 36, cursor: "pointer"
            }}
          >‚úàÔ∏è</button>
        </div>
      </div>
    );
  }

  return null;
};

// ---- –°—Ç–∏–ª–∏ ----
const pageStyle = { background: "#F8FBFC", minHeight: "100vh", width: "100vw", padding: "32px 0", position: "relative" } as React.CSSProperties;
const imgStyle = { width: 230, height: 230, objectFit: "contain", display: "block", margin: "0 auto" };
const btnStyle = { background: "linear-gradient(90deg,#F2A5A5,#F2A5A5)", color: "#fff", borderRadius: 19, height: 58, fontWeight: 600, fontSize: 22, border: "none", margin: "30px auto", display: "block", width: 340, cursor: "pointer" };
const cardStyle = { background: "#F7F8FA", borderRadius: 17, padding: "12px 24px", minWidth: 110, fontSize: 19, color: "#222", textAlign: "center", marginRight: 8 } as React.CSSProperties;
const selectStyle = { borderRadius: 13, padding: "8px 0", fontWeight: 700, fontSize: 32, minWidth: 50, textAlign: "center", margin: "0 2px", cursor: "pointer" } as React.CSSProperties;

export default NoraOnboarding;
