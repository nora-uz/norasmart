"use client";
import React, { useState, useEffect, useRef } from "react";

const ICONS = {
  telegram: "https://cdn-icons-png.flaticon.com/512/1946/1946547.png",
  trash: "https://cdn-icons-png.flaticon.com/512/1345/1345823.png",
  share: "https://cdn-icons-png.flaticon.com/512/535/535285.png",
  arrowRight: (
    <svg width="22" height="22" viewBox="0 0 22 22" fill="none">
      <path d="M6 11H16M16 11L12 7M16 11L12 15"
        stroke="#fff" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
    </svg>
  ),
};
const ICON_SIZE = 23;

const NORA_COLOR = "#2e2e2e";
const BORDER_RADIUS = 22;
const BLOCK_PADDING = 24; // –Ω–æ–≤—ã–π –æ–±—â–∏–π –æ—Ç—Å—Ç—É–ø –ø–æ –±–æ–∫–∞–º (—Ä–∞–≤–Ω—ã–π –¥–ª—è –≤—Å–µ—Ö –±–ª–æ–∫–æ–≤!)
const MAX_WIDTH = 560;
const GRADIENT = "linear-gradient(90deg, #eff5fe 0%, #e5e8ed 100%)";
const BABY_GRADIENT = "linear-gradient(90deg, #e39290 0%, #efb1b6 100%)";
const INPUT_HEIGHT = 68;
const CARD_GAP = 10;

// --- –ü–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏ ---
const HeaderPanel = ({ onClearChat }: { onClearChat?: () => void }) => (
  <div style={{
    width: `calc(100% - 30px)`,
    maxWidth: MAX_WIDTH,
    background: GRADIENT,
    margin: "20px auto 0 auto",
    borderRadius: BORDER_RADIUS,
    display: "flex",
    alignItems: "center",
    justifyContent: "space-between",
    padding: "5px 15px", // —Å—Ç–∞—Ä—ã–π –æ—Ç—Å—Ç—É–ø –≤–æ–∑–≤—Ä–∞—â—ë–Ω!
    fontFamily: "'Manrope', sans-serif"
  }}>
    <div style={{ flex: 1 }}>
      <div style={{ fontWeight: 800, fontSize: 19, marginBottom: 5 }}>Nora Plus</div>
      <div style={{ fontSize: 13, color: "#555" }}>–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –±—É–¥—É—â–∏—Ö –º–∞–º</div>
    </div>
    <div style={{ display: "flex", alignItems: "center", gap: 8 }}>
      <img onClick={() => window?.navigator?.share?.({ title: "Nora Plus", url: window.location.href })} src={ICONS.share} style={{ width: ICON_SIZE, height: ICON_SIZE, cursor: "pointer" }} alt="Share" />
      <img onClick={() => window.open("https://t.me/norasmart", "_blank")} src={ICONS.telegram} style={{ width: ICON_SIZE, height: ICON_SIZE, cursor: "pointer" }} alt="Telegram" />
      <img onClick={onClearChat} src={ICONS.trash} style={{ width: ICON_SIZE, height: ICON_SIZE, cursor: "pointer" }} alt="Trash" />
    </div>
  </div>
);

// --- Footer —Å –∫–Ω–æ–ø–∫–∞–º–∏ ---
const IconPartner = (
  <svg width="18" height="18" fill="none" viewBox="0 0 20 20">
    <circle cx="10" cy="6.5" r="3.3" stroke="#5a6573" strokeWidth="1.5"/>
    <path d="M2.8 16c.9-2.5 3.4-4.2 7.2-4.2s6.2 1.7 7.2 4.2" stroke="#5a6573" strokeWidth="1.5" strokeLinecap="round"/>
  </svg>
);
const IconContact = (
  <svg width="18" height="18" fill="none" viewBox="0 0 20 20">
    <rect x="2.8" y="3.5" width="14.4" height="11" rx="2.2" stroke="#5a6573" strokeWidth="1.5"/>
    <path d="M3.5 4l6.5 6.1c.3.2.8.2 1.1 0L17 4" stroke="#5a6573" strokeWidth="1.5"/>
  </svg>
);
const IconPolicy = (
  <svg width="16" height="16" fill="none" viewBox="0 0 20 20" style={{marginRight: 6}}>
    <path d="M4 4.5V10c0 5 7 6.5 7 6.5s7-1.5 7-6.5v-5.5–ª-7-2-7 2Z" stroke="#4d5762" strokeWidth="1.5" fill="none"/>
  </svg>
);

// --- –ü–æ—á–µ–º—É –ù–æ—Ä–∞ ---
const BENEFITS = [
  { emoji: "ü©∫", title: "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å", text: "–°–æ–≤–µ—Ç—ã –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö –±—Ä–∏—Ç–∞–Ω—Å–∫–æ–π —Å–ª—É–∂–±—ã NHS –∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–¥ –≤–∞—à —Ä–µ–≥–∏–æ–Ω." },
  { emoji: "ü§ù", title: "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7", text: "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏ –¥–ª—è –∑–∞–±–æ—Ç—ã –∏ –ø–æ–º–æ—â–∏ –≤ –ª—é–±–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏." },
  { emoji: "‚è∞", title: "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö –¥–µ–ª–∞—Ö", text: "–°–ª–µ–¥–∏–º, —á—Ç–æ–±—ã –≤—ã –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–±—ã–ª–∏ ‚Äî –∞–Ω–∞–ª–∏–∑—ã, –≤–∏—Ç–∞–º–∏–Ω—ã, –≤–∏–∑–∏—Ç—ã." },
  { emoji: "üîí", title: "–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å", text: "–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —É –≤–∞—Å ‚Äî –Ω–∏–∫–∞–∫–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–º." },
  { emoji: "‚ö°Ô∏è", title: "–ë—ã—Å—Ç—Ä—ã–µ —Ä–µ—à–µ–Ω–∏—è", text: "–ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ä–∞–∑—É, –∫–æ–≥–¥–∞ —ç—Ç–æ –Ω—É–∂–Ω–æ." },
];

const WhyNoraBlock = () => (
  <div style={{
    width: `calc(100% - ${BLOCK_PADDING * 2}px)`,
    maxWidth: MAX_WIDTH,
    margin: "0 auto 38px auto",
    background: GRADIENT,
    borderRadius: BORDER_RADIUS,
    boxShadow: "0 6px 20px rgba(150,175,205,0.1)",
    padding: `22px ${BLOCK_PADDING}px 20px ${BLOCK_PADDING}px`,
    fontFamily: "'Manrope', sans-serif"
  }}>
    <h3 style={{ textAlign: "center", fontSize: 20, color: NORA_COLOR, marginBottom: 20 }}>–ü–æ—á–µ–º—É Nora Plus?</h3>
    {BENEFITS.map(({ emoji, title, text }, idx) => (
      <div
        key={idx}
        style={{
          position: "relative",
          background: "#fff",
          borderRadius: 18,
          boxShadow: "0 2px 14px rgba(160,180,210,0.07)",
          padding: "15px 10px", // –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã —É–º–µ–Ω—å—à–µ–Ω—ã!
          marginBottom: 10
        }}
      >
        <span style={{
          position: "absolute",
          right: 12,
          top: 14,
          fontSize: 58,
          opacity: 0.14
        }}>{emoji}</span>
        <div>
          <div style={{ fontWeight: 700, marginBottom: 7 }}>{title}</div>
          <div style={{ fontSize: 13, color: "#3a3a3a", lineHeight: 1.6 }}>{text}</div>
        </div>
      </div>
    ))}
  </div>
);

// --- –û—Ç–∑—ã–≤—ã ---
const REVIEWS = [
  { name: "–ê–Ω–Ω–∞", badge: "2 –º–µ—Å—è—Ü –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏", text: "Nora Plus –ø–æ–¥—Å–∫–∞–∑–∞–ª–∞, –∫–∞–∫ —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å —É—Ç—Ä–µ–Ω–Ω–µ–π —Ç–æ—à–Ω–æ—Ç–æ–π, –±–ª–∞–≥–æ–¥–∞—Ä—è —Å–æ–≤–µ—Ç–∞–º –ø–æ –ø–∏—Ç–∞–Ω–∏—é —Å—Ç–∞–ª–æ –ª–µ–≥—á–µ." },
  { name: "–ï–ª–µ–Ω–∞", badge: "4 –º–µ—Å—è—Ü –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏", text: "–¢–µ–ø–µ—Ä—å —è –∑–Ω–∞—é, –∫–æ–≥–¥–∞ —Å–¥–∞–≤–∞—Ç—å –∞–Ω–∞–ª–∏–∑—ã –∏ –∫–∞–∫–∏–µ –≤–∏—Ç–∞–º–∏–Ω—ã –ø–∏—Ç—å. –í—Å—ë –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º." },
  { name: "–ò—Ä–∏–Ω–∞", badge: "5 –º–µ—Å—è—Ü –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏", text: "–£—Å–ø–æ–∫–æ–∏–ª–∞—Å—å: –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –ø–æ–ª—É—á–∞—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏." },
  { name: "–ú–∞—Ä–∏—è", badge: "7 –º–µ—Å—è—Ü –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏", text: "–ë–ª–∞–≥–æ–¥–∞—Ä—è —Å–æ–≤–µ—Ç–∞–º Nora Plus —è –ª—É—á—à–µ —Å–ø–ª—é –∏ —á—É–≤—Å—Ç–≤—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å!" },
];
const ReviewBlock = () => (
  <div style={{
    width: `calc(100% - ${BLOCK_PADDING * 2}px)`,
    maxWidth: MAX_WIDTH,
    margin: "0 auto 38px auto",
    background: GRADIENT,
    borderRadius: BORDER_RADIUS,
    boxShadow: "0 6px 20px rgba(150,175,205,0.1)",
    padding: `22px ${BLOCK_PADDING}px 20px ${BLOCK_PADDING}px`,
    fontFamily: "'Manrope', sans-serif"
  }}>
    <h3 style={{ textAlign: "center", fontSize: 20, color: NORA_COLOR, marginBottom: 20 }}>–û—Ç–∑—ã–≤—ã –±—É–¥—É—â–∏—Ö –º–∞–º</h3>
    {REVIEWS.map(({ name, badge, text }, idx) => (
      <div key={idx} style={{
        background: "#fff",
        borderRadius: 16,
        boxShadow: "0 2px 14px rgba(160,180,210,0.07)",
        padding: "15px 10px", // —É–º–µ–Ω—å—à–µ–Ω—ã –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã
        marginBottom: 10
      }}>
        <div style={{ display: "flex", alignItems: "center", gap: 9, marginBottom: 7 }}>
          <span style={{ fontWeight: 700, fontSize: 15 }}>{name}</span>
          <span style={{
            background: "#f3f7fe",
            color: "#1681f5",
            borderRadius: 12,
            padding: "3px 8px",
            fontSize: 13
          }}>{badge}</span>
        </div>
        <div style={{ fontSize: 13, color: "#3a3a3a", lineHeight: 1.6 }}>{text}</div>
      </div>
    ))}
  </div>
);

// --- –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ù–æ—Ä–∞ (–ª–µ–≥—á–µ, –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ) ---
const bubbleStyle = (align = "right") => ({
  alignSelf: align === "right" ? 'flex-end' : 'flex-start',
  background: "#fff",
  borderRadius: 19,
  padding: align === "right" ? "12px 18px" : "14px 18px",
  marginBottom: 16,
  maxWidth: 370,
  textAlign: "left" as const,
  lineHeight: "1.6",
  boxShadow: "0 1px 8px rgba(200,180,200,0.1)",
  color: NORA_COLOR,
  fontSize: 15
});

const NoraHowItWorksBlock = () => {
  const EXAMPLES = [
    { q: "–ú–æ–∂–Ω–æ –ª–∏ –ø–∏—Ç—å –∫–æ—Ñ–µ –≤–æ –≤—Ä–µ–º—è –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏?", a: "‚òï –ö–æ–Ω–µ—á–Ω–æ, –Ω–æ –Ω–µ –±–æ–ª—å—à–µ 1-2 —á–∞—à–µ–∫ –≤ –¥–µ–Ω—å –∏ –ª—É—á—à–µ –±–µ–∑ —Å–∞—Ö–∞—Ä–∞." },
    { q: "–Ø —á–∞—Å—Ç–æ –ø–µ—Ä–µ–∂–∏–≤–∞—é –±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã.", a: "ü§ó –≠—Ç–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ. –Ø –ø–æ–º–æ–≥—É —É—Å–ø–æ–∫–æ–∏—Ç—å—Å—è –∏ –ø–æ–Ω—è—Ç—å, —á—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –∞ –∫–æ–≥–¥–∞ –ª—É—á—à–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É." },
    { q: "–ë–æ–ª—è—Ç –Ω–æ–≥–∏ –∏ –ø–æ—è—Å–Ω–∏—Ü–∞.", a: "ü¶µ –≠—Ç–æ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–æ! –ü–æ–∫–∞–∂—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏ —Å–æ–≤–µ—Ç—ã –¥–ª—è –æ–±–ª–µ–≥—á–µ–Ω–∏—è." },
    { q: "–ü–ª–æ—Ö–æ —Å–ø–ª—é.", a: "üò¥ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ª—ë–≥–∫–∏–π –ø–µ—Ä–µ–∫—É—Å –ø–µ—Ä–µ–¥ —Å–Ω–æ–º, –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω—É—é –ø–æ–∑—É –Ω–∞ –±–æ–∫—É." },
    { q: "–ö–∞–∫–∏–µ –≤–∏—Ç–∞–º–∏–Ω—ã –ø—Ä–∏–Ω–∏–º–∞—Ç—å?", a: "üíä –ü–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∏—Ç–∞–º–∏–Ω—ã –∏ –Ω–∞–ø–æ–º–Ω—é, –∫–æ–≥–¥–∞ –∏—Ö –ø—Ä–∏–Ω–∏–º–∞—Ç—å." },
    { q: "–ú–æ–∂–Ω–æ –ª–∏ –ª–µ—Ç–∞—Ç—å?", a: "‚úàÔ∏è –ï—Å–ª–∏ –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ—Ç–µ–∫–∞–µ—Ç —Å–ø–æ–∫–æ–π–Ω–æ, –ø–µ—Ä–µ–ª—ë—Ç—ã –¥–æ 30 –Ω–µ–¥–µ–ª–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã, –Ω–æ —É—Ç–æ—á–Ω–∏—Ç–µ —É –≤—Ä–∞—á–∞." },
  ];
  const [step, setStep] = useState(0);
  const [phase, setPhase] = useState("typeQ");
  const [q, setQ] = useState("");
  const [a, setA] = useState("");

  useEffect(() => {
    if (phase === "typeQ") {
      setQ("");
      let i = 0;
      const id = setInterval(() => {
        setQ(EXAMPLES[step].q.slice(0, i + 1));
        i++;
        if (i > EXAMPLES[step].q.length) {
          clearInterval(id);
          setTimeout(() => setPhase("typeA"), 300);
        }
      }, 60);
      return () => clearInterval(id);
    }
    if (phase === "typeA") {
      setA("");
      let i = 0;
      const id = setInterval(() => {
        setA(EXAMPLES[step].a.slice(0, i + 1));
        i++;
        if (i > EXAMPLES[step].a.length) {
          clearInterval(id);
          setTimeout(() => setPhase("next"), 6500);
        }
      }, 35);
      return () => clearInterval(id);
    }
    if (phase === "next") {
      const timer = setTimeout(() => {
        setStep((step + 1) % EXAMPLES.length);
        setQ("");
        setA("");
        setPhase("typeQ");
      }, 300);
      return () => clearTimeout(timer);
    }
  }, [phase, step]);

  return (
    <div style={{
      width: `calc(100% - ${BLOCK_PADDING * 2}px)`,
      maxWidth: MAX_WIDTH,
      margin: "0 auto 38px auto",
      background: GRADIENT,
      borderRadius: BORDER_RADIUS,
      boxShadow: "0 6px 20px rgba(150,175,205,0.1)",
      padding: `22px ${BLOCK_PADDING}px 20px ${BLOCK_PADDING}px`
    }}>
      <h3 style={{ textAlign: "center", fontSize: 20, color: NORA_COLOR }}>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç Nora?</h3>
      <div style={{ height: 25 }} />
      <div style={{ display: "flex", flexDirection: "column" }}>
        {q && <div style={bubbleStyle("right")}>{q}<span style={{ opacity: 0.2 }}>{phase === "typeQ" && "|"}</span></div>}
        {a && <div style={bubbleStyle("left")}>{a}<span style={{ opacity: 0.2 }}>{phase === "typeA" && "|"}</span></div>}
      </div>
      <div style={{ textAlign: "center", color: "#7b8590", fontSize: 13, marginTop: 8 }}>–ù–æ—Ä–∞ –ø–æ–º–æ–≥–∞–µ—Ç –∏ –æ—Ç–≤–µ—á–∞–µ—Ç —Å—Ä–∞–∑—É</div>
    </div>
  );
};

// --- –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç ---
const Chat = () => {
  const [showWelcome, setShowWelcome] = useState(true);
  const [msg, setMsg] = useState("");
  const [chat, setChat] = useState<{ text: string; sender: "user" | "bot" }[]>([]);
  const endChat = useRef<HTMLDivElement>(null);
  useEffect(() => { if (endChat.current) endChat.current.scrollIntoView({ behavior: "smooth" }); }, [chat]);
  const send = () => {
    if (!msg.trim()) return;
    setChat([...chat, { text: msg, sender: "user" }]);
    setTimeout(() => {
      setChat(prev => [...prev, { text: "Nora –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å!", sender: "bot" }]);
      setMsg("");
    }, 1000);
  };
  return (
    <div style={{ background: "#f8fdff", minHeight: "100vh" }}>
      <HeaderPanel onClearChat={() => setChat([])} />
      {showWelcome ? (
        <>
          <div style={{ textAlign: "center", marginTop: 20 }}>
            <video src="/nora.mp4" style={{ width: "100%", maxWidth: 320, borderRadius: 22 }} autoPlay muted loop playsInline preload="auto" />
          </div>
          <div style={{ marginTop: 24, textAlign: "center" }}>
            <div style={{ fontSize: 22, color: NORA_COLOR, marginBottom: 12 }}>–ñ–¥—ë—Ç–µ –º–∞–ª—ã—à–∞? –Ø –ø–æ–º–æ–≥—É!</div>
            <div style={{ fontWeight: 400, color: NORA_COLOR, fontSize: 15, lineHeight: 1.75, padding: "0 34px" }}>
              –Ø –ø–æ–º–æ–≥–∞—é –±—É–¥—É—â–∏–º –º–∞–º–∞–º: –æ—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–æ–º–∏–Ω–∞—é –æ –≤–∞–∂–Ω—ã—Ö –¥–µ–ª–∞—Ö, —Å–ª–µ–∂—É –∑–∞ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é!
            </div>
          </div>
          <div style={{ textAlign: "center", marginTop: 36 }}>
            <button onClick={() => setShowWelcome(false)} style={{
              background: BABY_GRADIENT,
              border: "none",
              borderRadius: BORDER_RADIUS,
              color: "#fff",
              fontSize: 17,
              fontWeight: 700,
              padding: "15px 40px",
              cursor: "pointer"
            }}>
              –ù–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è {ICONS.arrowRight}
            </button>
          </div>
          <div style={{ textAlign: "center", color: "#7c8792", fontSize: 13, marginTop: 10 }}>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ ‚Äî —ç—Ç–æ –±—ã—Å—Ç—Ä–æ –∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ</div>
          <div style={{ marginTop: 40 }} />
          <NoraHowItWorksBlock />
          <WhyNoraBlock />
          <ReviewBlock />
          <Footer />
          <div style={{ height: 20 }} />
        </>
      ) : (
        <>
          <div style={{ maxWidth: MAX_WIDTH, margin: "0 auto", padding: "30px 0 90px 0" }}>
            {chat.map((m, i) => (
              <div key={i} style={{ textAlign: m.sender === "user" ? "right" : "left", margin: "10px 20px" }}>
                <span style={{
                  display: "inline-block",
                  background: m.sender === "user" ? "#fff" : "#f7fafd",
                  padding: 10,
                  borderRadius: 16,
                  fontSize: 16
                }}>{m.text}</span>
              </div>
            ))}
            <div ref={endChat} />
          </div>
          <div style={{
            position: "fixed", bottom: 25, left: 0, width: "calc(100% - 40px)", margin: "0 20px",
            maxWidth: MAX_WIDTH, display: "flex", alignItems: "center"
          }}>
            <input type="text" value={msg} onChange={e => setMsg(e.target.value)} onKeyDown={e => e.key === "Enter" && send()}
              placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
              style={{ flex: 1, height: 48, borderRadius: BORDER_RADIUS, border: "1px solid #e5e8ed", padding: "0 18px", fontSize: 16 }} />
            <button onClick={send} style={{
              width: 48, height: 48, border: "none", borderRadius: BORDER_RADIUS,
              marginLeft: 8, background: BABY_GRADIENT, color: "#fff", cursor: "pointer"
            }}>{ICONS.arrowRight}</button>
          </div>
        </>
      )}
    </div>
  );
};
export default Chat;
