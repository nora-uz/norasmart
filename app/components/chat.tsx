"use client";
import React, { useState, useEffect, useRef } from "react";

const NORA_COLOR = "#2e2e2e";
const borderRadius = 22;
const maxWidth = 560;
const videoMaxWidth = 314;
const GRADIENT = "linear-gradient(90deg, #eff5fe 0%, #e5e8ed 100%)";
const BABY_GRADIENT = "linear-gradient(90deg, #e39290 0%, #efb1b6 100%)";
const INPUT_BAR_HEIGHT = 68;
const PANEL_SIDE_PADDING = 15;
const BLOCK_SIDE_PADDING = 10;
const CARD_GAP = 10;

const IconPartner = (
  <svg width="18" height="18" fill="none" viewBox="0 0 20 20">
    <circle cx="10" cy="6.5" r="3.3" stroke="#5a6573" strokeWidth="1.5"/>
    <path d="M2.8 16c.9-2.5 3.4-4.2 7.2-4.2s6.2 1.7 7.2 4.2" stroke="#5a6573" strokeWidth="1.5" strokeLinecap="round"/>
  </svg>
);

const IconContact = (
  <svg width="18" height="18" fill="none" viewBox="0 0 20 20">
    <rect x="2.8" y="3.5" width="14.4" height="11" rx="2.2" stroke="#5a6573" strokeWidth="1.5"/>
    <path d="M3.5 4l6.5 6.1c.3.2.8.2 1.1 0L17 4" stroke="#5a6573" strokeWidth="1.5"/>
  </svg>
);

const IconLock = (
  <svg width="16" height="16" fill="none" viewBox="0 0 20 20"><rect x="5" y="9" width="10" height="7" rx="2" stroke="#8a97a0" strokeWidth="1.6"/><path d="M7.8 9V7a2.2 2.2 0 1 1 4.4 0v2" stroke="#8a97a0" strokeWidth="1.6"/></svg>
);

const ICONS = {
  telegram: "https://cdn-icons-png.flaticon.com/512/1946/1946547.png",
  trash: "https://cdn-icons-png.flaticon.com/512/1345/1345823.png",
  share: "https://cdn-icons-png.flaticon.com/512/535/535285.png",
  arrowRight: (
    <svg width="22" height="22" viewBox="0 0 22 22" fill="none">
      <path d="M6 11H16M16 11L12 7M16 11L12 15"
        stroke="#fff" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
    </svg>
  ),
};

const BENEFITS = [
  { emoji: "ü©∫", title: "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å", text: "–°–æ–≤–µ—Ç—ã –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö –±—Ä–∏—Ç–∞–Ω—Å–∫–æ–π —Å–ª—É–∂–±—ã NHS –∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–¥ –≤–∞—à —Ä–µ–≥–∏–æ–Ω." },
  { emoji: "ü§ù", title: "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7", text: "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏ –¥–ª—è –∑–∞–±–æ—Ç—ã –∏ –ø–æ–º–æ—â–∏ –≤ –ª—é–±–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏." },
  { emoji: "‚è∞", title: "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö –¥–µ–ª–∞—Ö", text: "–°–ª–µ–¥–∏–º, —á—Ç–æ–±—ã –≤—ã –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–±—ã–ª–∏ ‚Äî –∞–Ω–∞–ª–∏–∑—ã, –≤–∏—Ç–∞–º–∏–Ω—ã, –≤–∏–∑–∏—Ç—ã." },
  { emoji: "üîí", title: "–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å", text: "–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —É –≤–∞—Å ‚Äî –Ω–∏–∫–∞–∫–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–º." },
  { emoji: "‚ö°Ô∏è", title: "–ë—ã—Å—Ç—Ä—ã–µ —Ä–µ—à–µ–Ω–∏—è", text: "–ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ä–∞–∑—É, –∫–æ–≥–¥–∞ —ç—Ç–æ –Ω—É–∂–Ω–æ." },
];

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã ‚Äî —Å–º. –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤–µ—Ä—Å–∏–∏ (—Å–æ–∫—Ä–∞—Ç–∏–ª –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏)
const REVIEWS = [
  { name: "–ê–Ω–Ω–∞", badge: "2 –º–µ—Å—è—Ü –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏", problem: "–¢–æ–∫—Å–∏–∫–æ–∑", text: "Nora Plus –ø–æ–¥—Å–∫–∞–∑–∞–ª–∞, –∫–∞–∫ —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å —É—Ç—Ä–µ–Ω–Ω–µ–π —Ç–æ—à–Ω–æ—Ç–æ–π. –ë–ª–∞–≥–æ–¥–∞—Ä—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º –ø–æ –ø–∏—Ç–∞–Ω–∏—é –∏ —Ä–µ–∂–∏–º—É –¥–Ω—è —Å–∏–º–ø—Ç–æ–º—ã —Å—Ç–∞–ª–∏ –≥–æ—Ä–∞–∑–¥–æ –ª–µ–≥—á–µ." },
  // ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ—Ç–∑—ã–≤—ã ...
];

const TOPICS = [
  { emoji: "ü§¢", title: "–¢–æ—à–Ω–æ—Ç–∞ –∏ —Ç–æ–∫—Å–∏–∫–æ–∑", desc: "–ß—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞ —Ä–∞–Ω–Ω–∏—Ö —Å—Ä–æ–∫–∞—Ö?" },
  { emoji: "üçè", title: "–ü–∏—Ç–∞–Ω–∏–µ –ø—Ä–∏ –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏", desc: "–ö–∞–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ–ª–µ–∑–Ω—ã?" },
  { emoji: "ü§∏‚Äç‚ôÄÔ∏è", title: "–§–∏—Ç–Ω–µ—Å –∏ –¥–≤–∏–∂–µ–Ω–∏–µ", desc: "–ú–æ–∂–Ω–æ –ª–∏ –±–µ—Ä–µ–º–µ–Ω–Ω—ã–º —Å–ø–æ—Ä—Ç?" },
  { emoji: "üòî", title: "–≠–º–æ—Ü–∏–∏ –∏ —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å", desc: "–ö–∞–∫ —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å–æ —Å—Ç—Ä–∞—Ö–∞–º–∏?" },
  { emoji: "üíä", title: "–í–∏—Ç–∞–º–∏–Ω—ã", desc: "–ß—Ç–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å, –∞ —á—Ç–æ –Ω–µ—Ç?" },
  { emoji: "‚òïÔ∏è", title: "–ö–æ—Ñ–µ –∏ –Ω–∞–ø–∏—Ç–∫–∏", desc: "–ú–æ–∂–Ω–æ –ª–∏ –∫–æ—Ñ–µ –∏ —á–∞–π?" },
];

const TopicsBlock = ({ onTopicClick }) => (
  <div style={{
    margin: "0 auto 20px auto",
    maxWidth: 560,
    width: "100%",
    padding: "0 20px",
    display: "flex",
    flexDirection: "column",
    gap: 13
  }}>
    {TOPICS.map((topic, idx) => (
      <button
        key={idx}
        style={{
          width: "100%",
          background: "#fff",
          border: "none",
          borderRadius: 18,
          padding: "18px 16px 16px 18px",
          minHeight: 54,
          margin: 0,
          boxShadow: "0 2px 12px 0 rgba(150,180,220,0.09)",
          position: "relative",
          cursor: "pointer",
          textAlign: "left",
          transition: "box-shadow .12s"
        }}
        onClick={() => onTopicClick(`${topic.title}. ${topic.desc}`)}
      >
        <span style={{
          position: "absolute",
          right: 14,
          top: 12,
          fontSize: 54,
          opacity: 0.13,
          zIndex: 0,
          userSelect: "none",
          pointerEvents: "none"
        }}>{topic.emoji}</span>
        <div style={{ position: "relative", zIndex: 1 }}>
          <div style={{ fontWeight: 700, fontSize: 15, color: NORA_COLOR, marginBottom: 2 }}>{topic.title}</div>
          <div style={{ fontSize: 13, color: "#778" }}>{topic.desc}</div>
        </div>
      </button>
    ))}
  </div>
);

const WhatNoraDoesBlock = () => (
  <div
    style={{
      width: `calc(100% - ${BLOCK_SIDE_PADDING * 2}px)`,
      maxWidth,
      margin: "0 auto 38px auto",
      background: GRADIENT,
      borderRadius: borderRadius,
      boxShadow: "0 6px 20px 0 rgba(150, 175, 205, 0.10)",
      boxSizing: "border-box",
      padding: 0,
      fontFamily: "'Manrope', Arial, Helvetica, sans-serif"
    }}
  >
    <div style={{ padding: `21px 0 20px 0` }}>
      <div style={{
        fontWeight: 700,
        fontSize: "20px",
        color: NORA_COLOR,
        marginBottom: 20,
        textAlign: "center"
      }}>
        –ß—Ç–æ —É–º–µ–µ—Ç Nora?
      </div>
      <div style={{
        display: "flex",
        flexDirection: "column",
        gap: CARD_GAP,
        padding: `0 ${BLOCK_SIDE_PADDING}px`
      }}>
        {BENEFITS.map(({ emoji, title, text }, idx) => (
          <div
            key={idx}
            style={{
              position: "relative",
              background: "#fff",
              borderRadius: 18,
              boxShadow: "0 2px 18px 0 rgba(150,180,220,0.07)",
              padding: "19px 15px 19px 15px",
              overflow: "hidden",
              minHeight: 56,
              textAlign: "left"
            }}
          >
            <span
              style={{
                position: "absolute",
                right: 12,
                top: 14,
                fontSize: 62,
                opacity: 0.14,
                pointerEvents: "none",
                userSelect: "none",
                lineHeight: 1,
                zIndex: 0,
              }}
              aria-hidden="true"
            >
              {emoji}
            </span>
            <div style={{ position: "relative", zIndex: 1 }}>
              <div style={{ fontWeight: 700, fontSize: 16, color: NORA_COLOR, marginBottom: 7, textAlign: "left" }}>
                {title}
              </div>
              <div style={{ fontSize: 13, color: "#3a3a3a", lineHeight: "1.64", textAlign: "left" }}>
                {text}
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  </div>
);

// ReviewBlock, Footer, splitBotTextTwoBlocks ‚Äî –º–æ–∂–Ω–æ –≤–∑—è—Ç—å –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ñ–∞–π–ª–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.

const Chat = () => {
  const [showWelcome, setShowWelcome] = useState(true);
  const [message, setMessage] = useState("");
  const [chatHistory, setChatHistory] = useState([]);
  const [loading, setLoading] = useState(false);
  const [focused, setFocused] = useState(false);

  const [showTopics, setShowTopics] = useState(true);

  const messagesEndRef = useRef(null);

  useEffect(() => {
    if (chatHistory.length > 0) setShowTopics(false);
  }, [chatHistory.length]);

  const handleTopicClick = (topic) => {
    setMessage(topic);
    setShowTopics(false);
  };

  const handleSendMessage = () => {
    if (message.trim() && !loading) {
      setChatHistory(prev => [...prev, {text: message, sender: "user"}]);
      setMessage("");
      setShowTopics(false);
    }
  };

  // Welcome-—ç–∫—Ä–∞–Ω
  if (showWelcome) {
    return (
      <div style={{
        fontFamily: "'Manrope', Arial, Helvetica, sans-serif",
        background: "#f8fdff",
        width: "100vw",
        minHeight: "100vh"
      }}>
        {/* –ó–¥–µ—Å—å –≤–∞—à–∞ –ø–∞–Ω–µ–ª—å, –≤–∏–¥–µ–æ, –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ, –∫–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å", –±–ª–æ–∫ "–ß—Ç–æ —É–º–µ–µ—Ç Nora", –æ—Ç–∑—ã–≤—ã, —Ñ—É—Ç–µ—Ä */}
        <div style={{
          width: `calc(100% - ${BLOCK_SIDE_PADDING * 2}px)`,
          maxWidth,
          textAlign: "center",
          margin: "0 auto"
        }}>
          <div style={{
            fontWeight: 700, fontSize: "22px", color: NORA_COLOR, marginBottom: 14
          }}>–ñ–¥—ë—Ç–µ –º–∞–ª—ã—à–∞? –Ø –ø–æ–º–æ–≥—É!</div>
          <div style={{
            fontWeight: 400, fontSize: "15px", margin: "0 auto 0 auto", maxWidth: 400,
            padding: "0 18px",
            lineHeight: 1.75, color: NORA_COLOR, display: "inline-block"
          }}>
            –Ø –ø–æ–º–æ–≥–∞—é –±—É–¥—É—â–∏–º –º–∞–º–∞–º –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏: –æ—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–æ–º–∏–Ω–∞—é –æ –≤–∞–∂–Ω—ã—Ö –¥–µ–ª–∞—Ö –∏ —Å–ª–µ–∂—É –∑–∞ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ–º.
          </div>
          <div style={{ height: 40 }} />
          <div style={{ display: "flex", justifyContent: "center", width: "100%" }}>
            <div style={{ width: "100%", textAlign: "center" }}>
              <button
                style={{
                  width: "100%", maxWidth: 290,
                  background: BABY_GRADIENT,
                  color: "#fff",
                  border: "none",
                  borderRadius: borderRadius,
                  fontWeight: 700,
                  fontSize: "17px",
                  padding: "15px 0",
                  margin: "0 auto",
                  cursor: "pointer",
                  display: "flex", alignItems: "center", justifyContent: "center",
                  boxShadow: "0 2px 18px 0 rgba(200, 128, 140, 0.09)"
                }}
                onClick={() => setShowWelcome(false)}
              >
                –ù–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è&nbsp;
                <span style={{ marginLeft: 8, display: "flex", alignItems: "center" }}>{ICONS.arrowRight}</span>
              </button>
              <div style={{ height: 13 }} />
              <div style={{ fontSize: 13, color: "#7c8792" }}>
                –ü–æ–ø—Ä–æ–±—É–π—Ç–µ ‚Äî —ç—Ç–æ –±—ã—Å—Ç—Ä–æ –∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ
              </div>
            </div>
          </div>
          <div style={{ height: 40 }} />
          <WhatNoraDoesBlock />
          {/* ReviewBlock, Footer ‚Äî –≤—Å—Ç–∞–≤—å—Ç–µ –∫–∞–∫ –≤ –≤–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ */}
        </div>
      </div>
    );
  }

  // --- –ß–ê–¢-–≠–ö–†–ê–ù ---
  return (
    <div style={{
      background: "#f8fdff",
      width: "100vw",
      minHeight: "100vh",
      display: "flex",
      flexDirection: "column"
    }}>
      {/* –ü–∞–Ω–µ–ª—å ... */}
      {showTopics && <TopicsBlock onTopicClick={handleTopicClick}/>}
      {/* –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π */}
      <div style={{ flex: 1, display: "flex", flexDirection: "column", justifyContent: "flex-end" }}>
        <div style={{ width: "100%", maxWidth: maxWidth, margin: "0 auto", padding: "80px 0 110px 0" }}>
          {chatHistory.map((msg, idx) => (
            <div
              key={idx}
              style={{
                textAlign: msg.sender === "user" ? "right" : "left",
                margin: "8px 20px"
              }}
            >
              <span style={{
                background: msg.sender === "user" ? GRADIENT : "#f7fafd",
                padding: 10,
                borderRadius: 16,
                fontSize: 16
              }}>{msg.text}</span>
            </div>
          ))}
          <div ref={messagesEndRef} />
        </div>
      </div>
      <div style={{
        width: "calc(100% - 40px)",
        margin: "0 20px",
        display: "flex",
        alignItems: "center",
        boxSizing: "border-box",
        maxWidth: maxWidth,
        height: INPUT_BAR_HEIGHT,
        position: "fixed",
        left: 0,
        bottom: 25,
        background: "transparent",
        borderRadius: borderRadius,
        zIndex: 20,
        boxShadow: "none"
      }}>
        <input
          type="text"
          value={message}
          onFocus={() => setFocused(true)}
          onBlur={() => setFocused(false)}
          onChange={e => setMessage(e.target.value)}
          placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
          style={{
            flex: 1,
            height: 48,
            fontSize: "16px",
            borderRadius: borderRadius,
            borderWidth: focused ? 2 : 1,
            borderStyle: "solid",
            borderColor: focused ? "transparent" : "#e5e8ed",
            borderImage: focused ? GRADIENT + " 1" : undefined,
            padding: "0 18px",
            background: "#fff",
            color: NORA_COLOR,
            boxSizing: "border-box",
            marginRight: 8,
            transition: "border 0.22s"
          }}
          onKeyDown={e => { if (e.key === 'Enter') handleSendMessage(); }}
          disabled={loading}
        />
        <button
          style={{
            width: 48,
            height: 48,
            background: BABY_GRADIENT,
            color: "#fff",
            border: "none",
            borderRadius: borderRadius,
            fontWeight: 700,
            fontSize: "17px",
            cursor: loading ? "not-allowed" : "pointer",
            display: "flex",
            alignItems: "center",
            justifyContent: "center",
            boxShadow: "0 2px 14px 0 rgba(155,175,205,0.12)"
          }}
          onClick={handleSendMessage}
          disabled={loading}
        >
          <span style={{ display: "flex", alignItems: "center", justifyContent: "center" }}>
            {ICONS.arrowRight}
          </span>
        </button>
      </div>
      {/* Footer ‚Äî –≤—Å—Ç–∞–≤—å—Ç–µ –∫–∞–∫ –≤ –≤–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ */}
    </div>
  );
};

export default Chat;
