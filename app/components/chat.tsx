"use client";
import React, { useState, useEffect, useRef } from "react";

// ------ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ------
const NORA_COLOR = "#2e2e2e";
const ICON_SIZE = 23;
const borderRadius = 22;
const panelHeight = 62;
const maxWidth = 560;
const videoMaxWidth = 314;
const GRADIENT = "linear-gradient(90deg, #eff5fe 0%, #e5e8ed 100%)";
const BABY_GRADIENT = "linear-gradient(90deg, #e39290 0%, #efb1b6 100%)";
const INPUT_BAR_HEIGHT = 68;
const PANEL_SIDE_PADDING = 15;
const BLOCK_SIDE_PADDING = 10;
const CARD_GAP = 10;
const THREAD_KEY = "nora_thread_id";

// ------ SVG –∏–∫–æ–Ω–∫–∏ ------
const IconPartner = (
  <svg width="18" height="18" fill="none" viewBox="0 0 20 20">
    <circle cx="10" cy="6.5" r="3.3" stroke="#5a6573" strokeWidth="1.5"/>
    <path d="M2.8 16c.9-2.5 3.4-4.2 7.2-4.2s6.2 1.7 7.2 4.2"
      stroke="#5a6573" strokeWidth="1.5" strokeLinecap="round"/>
  </svg>
);
const IconContact = (
  <svg width="18" height="18" fill="none" viewBox="0 0 20 20">
    <rect x="2.8" y="3.5" width="14.4" height="11" rx="2.2"
      stroke="#5a6573" strokeWidth="1.5"/>
    <path d="M3.5 4l6.5 6.1c.3.2.8.2 1.1 0L17 4"
      stroke="#5a6573" strokeWidth="1.5"/>
  </svg>
);
const ICONS = {
  telegram: "https://cdn-icons-png.flaticon.com/512/1946/1946547.png",
  trash: "https://cdn-icons-png.flaticon.com/512/1345/1345823.png",
  share: "https://cdn-icons-png.flaticon.com/512/535/535285.png",
  arrowRight: (
    <svg width="22" height="22" viewBox="0 0 22 22" fill="none">
      <path d="M6 11H16M16 11L12 7M16 11L12 15"
        stroke="#fff" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
    </svg>
  ),
};
const filterNora = "invert(13%) sepia(4%) saturate(271%) hue-rotate(175deg) brightness(92%) contrast(93%)";

// ------ –î–∞–Ω–Ω—ã–µ ------
const BENEFITS = [
  { emoji: "ü©∫", title: "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å", text: "–°–æ–≤–µ—Ç—ã –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö –±—Ä–∏—Ç–∞–Ω—Å–∫–æ–π —Å–ª—É–∂–±—ã NHS –∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–¥ –≤–∞—à —Ä–µ–≥–∏–æ–Ω." },
  { emoji: "ü§ù", title: "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7", text: "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏ –¥–ª—è –∑–∞–±–æ—Ç—ã –∏ –ø–æ–º–æ—â–∏ –≤ –ª—é–±–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏." },
  { emoji: "‚è∞", title: "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö –¥–µ–ª–∞—Ö", text: "–°–ª–µ–¥–∏–º, —á—Ç–æ–±—ã –≤—ã –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–±—ã–ª–∏ ‚Äî –∞–Ω–∞–ª–∏–∑—ã, –≤–∏—Ç–∞–º–∏–Ω—ã, –≤–∏–∑–∏—Ç—ã." },
  { emoji: "üîí", title: "–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å", text: "–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —É –≤–∞—Å ‚Äî –Ω–∏–∫–∞–∫–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–º." },
  { emoji: "‚ö°Ô∏è", title: "–ë—ã—Å—Ç—Ä—ã–µ —Ä–µ—à–µ–Ω–∏—è", text: "–ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ä–∞–∑—É, –∫–æ–≥–¥–∞ —ç—Ç–æ –Ω—É–∂–Ω–æ." },
];
const REVIEWS = [
  { name: "–ê–Ω–Ω–∞", badge: "2 –º–µ—Å—è—Ü –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏", problem: "–¢–æ–∫—Å–∏–∫–æ–∑", text: "Nora Plus –ø–æ–¥—Å–∫–∞–∑–∞–ª–∞, –∫–∞–∫ —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å —É—Ç—Ä–µ–Ω–Ω–µ–π —Ç–æ—à–Ω–æ—Ç–æ–π. –ë–ª–∞–≥–æ–¥–∞—Ä—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º –ø–æ –ø–∏—Ç–∞–Ω–∏—é –∏ —Ä–µ–∂–∏–º—É –¥–Ω—è —Å–∏–º–ø—Ç–æ–º—ã —Å—Ç–∞–ª–∏ –≥–æ—Ä–∞–∑–¥–æ –ª–µ–≥—á–µ." },
  // ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ—Ç–∑—ã–≤—ã ...
];

// ------ Footer ------
const Footer = () => (
  <div style={{
    width: `calc(100% - 40px)`,
    maxWidth,
    margin: "0 auto",
    background: GRADIENT,
    borderRadius: "22px",
    boxShadow: "0 -4px 14px 0 rgba(155,175,205,0.06)",
    boxSizing: "border-box",
    fontFamily: "'Manrope', Arial, Helvetica, sans-serif",
    paddingLeft: 20,
    paddingRight: 20,
    paddingTop: 22,
    paddingBottom: 22,
    display: "flex",
    flexDirection: "column",
    gap: 18,
    alignItems: "center"
  }}>
    <div style={{
      fontSize: 12,
      color: "#263540",
      fontWeight: 600,
      textAlign: "center",
      width: "100%"
    }}>
      –¢–∞—à–∫–µ–Ω—Ç, –Æ–Ω—É—Å–∞–±–∞–¥—Å–∫–∏–π —Ä–∞–π–æ–Ω, –º–∞—Å—Å–∏–≤ –ö–∞—à–≥–∞—Ä 26
    </div>
    <div style={{
      display: "flex",
      gap: 11,
      width: "100%",
      justifyContent: "center"
    }}>
      <a href="#" style={{
        background: "#fff",
        width: "63%",
        borderRadius: 13,
        color: "#495062",
        fontWeight: 400,
        fontSize: 14,
        padding: "9px 0",
        textDecoration: "none",
        textAlign: "center",
        border: "1px solid #e1e9f5",
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        gap: 7,
        marginRight: 5
      }}>{IconPartner} –°—Ç–∞—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º</a>
      <a href="#" style={{
        background: "#fff",
        width: "37%",
        borderRadius: 13,
        color: "#495062",
        fontWeight: 400,
        fontSize: 14,
        padding: "9px 0",
        textDecoration: "none",
        textAlign: "center",
        border: "1px solid #e1e9f5",
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        gap: 7
      }}>{IconContact} –ö–æ–Ω—Ç–∞–∫—Ç—ã</a>
    </div>
    <a href="#" style={{
      background: "#fff",
      padding: "7px 0",
      width: "100%",
      borderRadius: 14,
      color: "#556",
      fontWeight: 500,
      fontSize: 14,
      textDecoration: "none",
      border: "1px solid #e1e9f5",
      textAlign: "center"
    }}>–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</a>
    <div style={{
      marginTop: 8,
      fontSize: 12,
      color: "#8a97a0",
      textAlign: "center",
      width: "100%"
    }}>
      ¬© {new Date().getFullYear()} Nora Plus ‚Äî –∑–∞–±–æ—Ç–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –±—É–¥—É—â–∏—Ö –º–∞–º
    </div>
  </div>
);
const FooterGap = () => <div style={{height: 20}} />;

// ------ WhyNoraBlock ------
const WhyNoraBlock = () => (
  <div style={{
    width: `calc(100% - ${BLOCK_SIDE_PADDING * 2}px)`,
    maxWidth,
    margin: "0 auto 38px auto",
    background: GRADIENT,
    borderRadius: borderRadius,
    boxShadow: "0 6px 20px 0 rgba(150, 175, 205, 0.10)",
    boxSizing: "border-box",
    padding: 0,
    fontFamily: "'Manrope', Arial, Helvetica, sans-serif"
  }}>
    <div style={{ padding: `21px 0 20px 0` }}>
      <div style={{
        fontWeight: 700,
        fontSize: "20px",
        color: NORA_COLOR,
        marginBottom: 20,
        textAlign: "center"
      }}>
        –ü–æ—á–µ–º—É Nora Plus?
      </div>
      <div style={{
        display: "flex",
        flexDirection: "column",
        gap: CARD_GAP,
        padding: `0 ${BLOCK_SIDE_PADDING}px`
      }}>
        {BENEFITS.map(({ emoji, title, text }, idx) => (
          <div key={idx} style={{
            position: "relative",
            background: "#fff",
            borderRadius: 18,
            boxShadow: "0 2px 18px 0 rgba(150,180,220,0.07)",
            padding: "19px 15px 19px 15px",
            overflow: "hidden",
            minHeight: 56,
            textAlign: "left"
          }}>
            <span style={{
              position: "absolute",
              right: 12,
              top: 14,
              fontSize: 62,
              opacity: 0.14,
              pointerEvents: "none",
              userSelect: "none",
              lineHeight: 1,
              zIndex: 0,
            }} aria-hidden="true">
              {emoji}
            </span>
            <div style={{ position: "relative", zIndex: 1 }}>
              <div style={{ fontWeight: 700, fontSize: 16, color: NORA_COLOR, marginBottom: 7, textAlign: "left" }}>
                {title}
              </div>
              <div style={{ fontSize: 13, color: "#3a3a3a", lineHeight: "1.64", textAlign: "left" }}>
                {text}
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  </div>
);

// ------ ReviewBlock ------
const ReviewBlock = () => (
  <div style={{
    width: `calc(100% - ${BLOCK_SIDE_PADDING * 2}px)`,
    maxWidth,
    margin: "0 auto 38px auto",
    background: GRADIENT,
    borderRadius: borderRadius,
    boxShadow: "0 6px 20px 0 rgba(150, 175, 205, 0.10)",
    boxSizing: "border-box",
    padding: 0,
    fontFamily: "'Manrope', Arial, Helvetica, sans-serif"
  }}>
    <div style={{ padding: "21px 0 20px 0" }}>
      <div style={{
        fontWeight: 700,
        fontSize: "20px",
        color: NORA_COLOR,
        marginBottom: 20,
        textAlign: "center"
      }}>
        –û—Ç–∑—ã–≤—ã –±—É–¥—É—â–∏—Ö –º–∞–º
      </div>
      <div style={{
        display: "flex",
        flexDirection: "column",
        gap: CARD_GAP,
        padding: `0 ${BLOCK_SIDE_PADDING}px`
      }}>
        {REVIEWS.map(({ name, badge, problem, text }, idx) => (
          <div key={idx} style={{
            background: "#fff",
            borderRadius: 18,
            boxShadow: "0 2px 18px 0 rgba(150,180,220,0.07)",
            padding: "19px 15px 19px 15px",
            overflow: "hidden",
            textAlign: "left"
          }}>
            <div style={{ position: "relative", zIndex: 1 }}>
              <div style={{ display: "flex", alignItems: "center", gap: 8, marginBottom: 7 }}>
                <span style={{
                  fontWeight: 700, fontSize: 15, color: "#222"
                }}>{name}</span>
                <span style={{
                  fontWeight: 500, fontSize: 13, color: "#1681f5",
                  padding: "4px 9px", borderRadius: 12, background: "#f3f7fe", whiteSpace: "nowrap"
                }}>{badge}</span>
              </div>
              <div style={{ fontWeight: 500, fontSize: 13, color: "#acb5bd", marginBottom: 9 }}>
                {problem}
              </div>
              <div style={{ fontSize: 13, color: "#3a3a3a", lineHeight: "1.64" }}>
                {text}
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  </div>
);

// ------ HowItWorks ------
const HowItWorks = () => {
  const EXAMPLES = [
    {
      q: "–Ø —á–∞—Å—Ç–æ –≤–æ–ª–Ω—É—é—Å—å –±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã.",
      a: "ü§ó –≠—Ç–æ –æ—á–µ–Ω—å —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–æ —É –±–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö! –≠–º–æ—Ü–∏–∏ —É—Å–∏–ª–∏–≤–∞—é—Ç—Å—è –∏–∑-–∑–∞ –≥–æ—Ä–º–æ–Ω–æ–≤. –ü—Ä–æ–≥—É–ª–∫–∏ –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ, –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏ –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã —Å –±–ª–∏–∑–∫–∏–º–∏ ‚Äî —Ö–æ—Ä–æ—à–∏–µ –ø–æ–º–æ—â–Ω–∏–∫–∏. –°–∏–ª—å–Ω–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç ‚Äî —Ä–∞—Å—Å–∫–∞–∂—É, –∫–∞–∫ —Å–Ω–∏–∑–∏—Ç—å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å."
    },
    {
      q: "–ë–æ–ª–∏—Ç —Å–ø–∏–Ω–∞ –∏ –ø–æ—è—Å–Ω–∏—Ü–∞.",
      a: "üíÜ –ß–∞—â–µ –≤—Å–µ–≥–æ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è –æ—Ä–≥–∞–Ω–∏–∑–º–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞ —Ç—è–∂–µ—Å—Ç–∏. –ü–æ–º–æ–≥–∞–µ—Ç –æ—Ç–¥—ã—Ö –Ω–∞ –±–æ–∫—É —Å –ø–æ–¥—É—à–∫–æ–π –º–µ–∂–¥—É –Ω–æ–≥, –æ—Ç–∫–∞–∑ –æ—Ç —Ç—è–∂–µ–ª—ã—Ö —Å—É–º–æ–∫ –∏ –ø–ª–∞–≤–Ω—ã–µ —Ä–∞—Å—Ç—è–∂–∫–∏. –ï—Å–ª–∏ –±–æ–ª–∏ —Å–∏–ª—å–Ω—ã–µ ‚Äî —Å–∫–∞–∂–∏, –ø–æ–¥—Å–∫–∞–∂—É, —á—Ç–æ –µ—â—ë –≤–∞–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å."
    },
    {
      q: "–ü–ª–æ—Ö–æ —Å–ø–ª—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏.",
      a: "üò¥ –õ—ë–≥–∫–∏–µ –≤–µ—á–µ—Ä–Ω–∏–µ –ø—Ä–æ–≥—É–ª–∫–∏, –ø—Ä–æ–≤–µ—Ç—Ä–∏–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è –ø–æ–¥—É—à–∫–∞ —á–∞—Å—Ç–æ —Ä–µ—à–∞—é—Ç –ø—Ä–æ–±–ª–µ–º—É. –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞—Å—ã–ø–∞–Ω–∏–µ–º –∑–∞—Ç—è–∂–Ω—ã–µ, –æ–±—Å—É–¥–∏ —ç—Ç–æ —Å–æ –º–Ω–æ–π ‚Äî –Ω–∞–π–¥–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–∏—Ç—É–∞–ª –æ—Ç–¥—ã—Ö–∞!"
    },
    {
      q: "–ú–æ–∂–Ω–æ –ª–∏ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Å–ø–æ—Ä—Ç–æ–º?",
      a: "üèÉ‚Äç‚ôÄÔ∏è –î–≤–∏–∂–µ–Ω–∏–µ –≤—Å–µ–≥–¥–∞ –ø–æ–ª–µ–∑–Ω–æ, –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏–π. –õ—É—á—à–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏—è—Ö –¥–ª—è –±–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: –π–æ–≥–∞, –ø–ª–∞–≤–∞–Ω–∏–µ, –ø–µ—à–∏–µ –ø—Ä–æ–≥—É–ª–∫–∏. –•–æ—á–µ—à—å ‚Äî –ø—Ä–µ–¥–ª–æ–∂—É –ø—Ä–æ—Å—Ç–æ–π –∫–æ–º–ø–ª–µ–∫—Å –ª–µ–≥–∫–∏—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π."
    }
  ];

  const [step, setStep] = useState(0);
  const [phase, setPhase] = useState("q");
  const [q, setQ] = useState("");
  const [a, setA] = useState("");

  useEffect(() => {
    let t;
    if (phase === "q") {
      setQ("");
      let i = 0;
      t = setInterval(() => {
        setQ(EXAMPLES[step].q.slice(0, i + 1));
        i++;
        if (i > EXAMPLES[step].q.length) { clearInterval(t); setTimeout(() => setPhase("a"), 350); }
      }, 35);
    } else if (phase === "a") {
      setA(""); let i = 0;
      t = setInterval(() => {
        setA(EXAMPLES[step].a.slice(0, i + 1));
        i++;
        if (i > EXAMPLES[step].a.length) { clearInterval(t); setTimeout(() => setPhase("next"), 6900); }
      }, 17);
    } else if (phase === "next") {
      t = setTimeout(() => { setStep((s) => (s + 1) % EXAMPLES.length); setPhase("q"); }, 350);
    }
    return () => clearInterval(t);
  }, [phase, step]);

  const bubbleUser = (text) => (
    <div style={{
      alignSelf: "flex-end",
      background: "#fff",
      borderRadius: "19px 19px 4px 19px",
      padding: "20px 22px",
      marginBottom: 26,
      maxWidth: 400,
      textAlign: "right",
      fontSize: 15.5,
      lineHeight: 1.7,
      boxShadow: "0 1px 8px rgba(200,180,200,0.12)"
    }}>{text}</div>
  );
  const bubbleBot = (text) => (
    <div style={{
      alignSelf: "flex-start",
      background: "#f7fafd",
      borderRadius: "19px 19px 19px 4px",
      padding: "22px 24px",
      marginBottom: 26,
      maxWidth: 420,
      textAlign: "left",
      fontSize: 15.5,
      lineHeight: 1.7,
      boxShadow: "0 1px 8px rgba(200,180,200,0.12)"
    }}>{text}</div>
  );

  return (
    <div style={{
      width: `calc(100% - ${BLOCK_SIDE_PADDING * 2}px)`,
      maxWidth,
      margin: "0 auto 38px auto",
      background: GRADIENT,
      borderRadius: 22,
      boxShadow: "0 6px 20px rgba(150,175,205,0.1)",
      padding: "21px 0 20px 0",
      fontFamily: "'Manrope', Arial, Helvetica, sans-serif"
    }}>
      <div style={{
        display: "flex",
        flexDirection: "column",
        padding: `0 ${BLOCK_SIDE_PADDING}px`
      }}>
        {q && bubbleUser(q)}
        {a && bubbleBot(a)}
      </div>
      <div style={{
        fontSize: 13,
        color: "#7b8590",
        textAlign: "center",
        marginTop: 8
      }}>
        –ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å ‚Äî –ù–æ—Ä–∞ –Ω–∞–π–¥—ë—Ç –æ—Ç–≤–µ—Ç!
      </div>
    </div>
  );
};

// ------ TabPanel ------
const TABS = [
  { key: "how", label: "–ü—Ä–∏–º–µ—Ä" },
  { key: "why", label: "–ü–æ—á–µ–º—É Nora?" },
  { key: "reviews", label: "–û—Ç–∑—ã–≤—ã" },
];
const TabPanel = () => {
  const [activeTab, setActiveTab] = useState("how");
  const tabBtnStyle = (isActive) => ({
    flex: 1,
    minWidth: 0,
    padding: "14px 0",
    fontWeight: 700,
    fontSize: "16px",
    border: "none",
    borderRadius: borderRadius,
    cursor: "pointer",
    color: isActive ? "#fff" : NORA_COLOR,
    background: isActive ? BABY_GRADIENT : GRADIENT,
    transition: "background 0.22s, color 0.18s",
    boxShadow: isActive ? "0 2px 14px 0 rgba(200,128,140,0.09)" : "none",
    outline: "none"
  });
  return (
    <div style={{
      width: `calc(100% - ${BLOCK_SIDE_PADDING * 2}px)`,
      maxWidth,
      margin: "0 auto"
    }}>
      <div style={{
        display: "flex",
        gap: 12,
        justifyContent: "center",
        padding: `0 ${BLOCK_SIDE_PADDING}px`,
        marginBottom: 25,
        marginTop: 5,
      }}>
        {TABS.map(tab => (
          <button
            key={tab.key}
            style={tabBtnStyle(activeTab === tab.key)}
            onClick={() => setActiveTab(tab.key)}
            type="button"
          >
            {tab.label}
          </button>
        ))}
      </div>
      <div>
        {activeTab === "how" && <HowItWorks />}
        {activeTab === "why" && <WhyNoraBlock />}
        {activeTab === "reviews" && <ReviewBlock />}
      </div>
    </div>
  );
};

// ------ splitBotTextTwoBlocks (–∫–∞–∫ —É –≤–∞—Å) ------
function splitBotTextTwoBlocks(text) {
  if (!text) return [];
  let cleaned = text.replace(/[*_]/g, "");
  const match = cleaned.match(/^([^.!?]+[.!?])\s*(.*)$/s);
  if (match) {
    const first = match[1].trim();
    const rest = match[2].trim();
    return [
      { text: first, bold: true },
      { text: rest, bold: false }
    ];
  } else {
    return [{ text: cleaned, bold: true }];
  }
}

// ------ Chat ------
const Chat = () => {
  const [showWelcome, setShowWelcome] = useState(true);
  const [preloading, setPreloading] = useState(true);
  const [message, setMessage] = useState("");
  const [chatHistory, setChatHistory] = useState([]);
  const [loading, setLoading] = useState(false);
  const [threadId, setThreadId] = useState(null);
  const [botProgress, setBotProgress] = useState("");
  const [isMobile, setIsMobile] = useState(true);
  const [focused, setFocused] = useState(false);
  const messagesEndRef = useRef(null);

  // ... –≤–∞—à useEffect, —Ñ—É–Ω–∫—Ü–∏–∏, sendMessageToGPT, handleSendMessage –∏ –ø—Ä. ...
  // –û—Å—Ç–∞–≤—å—Ç–µ –∫–∞–∫ —É –≤–∞—Å!

  // –ù–∏–∂–µ ‚Äî –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ return JSX!
  return (
    <div>
      {showWelcome ? (
        <div style={{
          fontFamily: "'Manrope', Arial, Helvetica, sans-serif",
          background: "#f8fdff",
          width: "100vw",
          minHeight: "100vh"
        }}>
          {/* –ü–∞–Ω–µ–ª—å –∏ –≤–∏–¥–µ–æ, –æ–ø–∏—Å–∞–Ω–∏–µ, –∫–Ω–æ–ø–∫–∞ */}
          <div style={{
            width: `calc(100% - ${PANEL_SIDE_PADDING * 2}px)`,
            maxWidth,
            minHeight: panelHeight,
            background: GRADIENT,
            color: NORA_COLOR,
            margin: "20px auto 0 auto",
            display: "flex",
            alignItems: "center",
            justifyContent: "space-between",
            borderRadius: borderRadius,
            paddingLeft: PANEL_SIDE_PADDING, paddingRight: PANEL_SIDE_PADDING, paddingTop: 5, paddingBottom: 5,
            boxSizing: "border-box", zIndex: 1,
            fontFamily: "'Manrope', Arial, Helvetica, sans-serif"
          }}>
            <div style={{ display: "flex", flexDirection: "column", alignItems: "flex-start", flex: 1, paddingLeft: 5 }}>
              <span style={{
                fontWeight: 800, fontSize: "19px", lineHeight: 1.06, whiteSpace: "nowrap", marginBottom: 7
              }}>
                Nora Plus
              </span>
              <span style={{
                fontWeight: 400, fontSize: "13px", color: "#565656", lineHeight: 1.04, whiteSpace: "nowrap"
              }}>
                –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –±—É–¥—É—â–∏—Ö –º–∞–º
              </span>
            </div>
            <div style={{ display: "flex", alignItems: "center", gap: 8, marginLeft: 16 }}>
              {/* ...–≤–∞—à–∏ –∫–Ω–æ–ø–∫–∏ Share/Telegram/Trash... */}
            </div>
          </div>
          <div style={{ height: 20 }} />
          <div
            style={{
              width: "100%",
              maxWidth: maxWidth,
              margin: "0 auto",
              display: "flex",
              justifyContent: "center",
              alignItems: "center"
            }}
          >
            <video
              src="/nora.mp4"
              style={{
                width: "100%",
                maxWidth: videoMaxWidth,
                display: "block",
                borderRadius: 24
              }}
              autoPlay
              playsInline
              muted
              loop
              preload="auto"
            />
          </div>
          {/* –û–ø–∏—Å–∞–Ω–∏–µ, –∫–Ω–æ–ø–∫–∞, –≤–∫–ª–∞–¥–∫–∏, —Ñ—É—Ç–µ—Ä */}
          <div style={{
            width: `calc(100% - ${BLOCK_SIDE_PADDING * 2}px)`,
            maxWidth,
            textAlign: "center",
            margin: "0 auto"
          }}>
            <div style={{
              fontWeight: 700, fontSize: "22px", color: NORA_COLOR, marginBottom: 14
            }}>–ñ–¥—ë—Ç–µ –º–∞–ª—ã—à–∞? –Ø –ø–æ–º–æ–≥—É!</div>
            <div style={{
              fontWeight: 400, fontSize: "15px", margin: "0 auto 0 auto", maxWidth: 400,
              padding: "0 18px",
              lineHeight: 1.75, color: NORA_COLOR, display: "inline-block"
            }}>
              –Ø –ø–æ–º–æ–≥–∞—é –±—É–¥—É—â–∏–º –º–∞–º–∞–º –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏: –æ—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–æ–º–∏–Ω–∞—é –æ –≤–∞–∂–Ω—ã—Ö –¥–µ–ª–∞—Ö, —Å–ª–µ–∂—É –∑–∞ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ–º –∏ –¥–∞—é —Å–æ–≤–µ—Ç—ã, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ –º–µ–¥–∏—Ü–∏–Ω–µ –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏–∏ NHS.
            </div>
            <div style={{ height: 40 }} />
            <div style={{ width: "100%", textAlign: "center" }}>
              <button
                style={{
                  width: "100%", maxWidth: 290,
                  background: BABY_GRADIENT,
                  color: "#fff",
                  border: "none",
                  borderRadius: borderRadius,
                  fontWeight: 700,
                  fontSize: "17px",
                  padding: "15px 0",
                  margin: "0 auto",
                  cursor: "pointer",
                  display: "flex", alignItems: "center", justifyContent: "center",
                  boxShadow: "0 2px 18px 0 rgba(200, 128, 140, 0.09)"
                }}
                onClick={() => setShowWelcome(false)}
              >
                –ù–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è&nbsp;
                <span style={{ marginLeft: 8, display: "flex", alignItems: "center" }}>{ICONS.arrowRight}</span>
              </button>
              <div style={{ height: 13 }} />
              <div style={{ fontSize: 13, color: "#7c8792" }}>
                –ü–æ–ø—Ä–æ–±—É–π—Ç–µ ‚Äî —ç—Ç–æ –±—ã—Å—Ç—Ä–æ –∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ
              </div>
            </div>
            <div style={{ height: 40 }} />
            <Footer />
            <FooterGap />
          </div>
        </div>
      ) : (
        <TabPanel />
      )}
    </div>
  );
};

export default Chat;
